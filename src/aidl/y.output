Terminals unused in grammar

    "unrecognized character"


Grammar

    0 $accept: document $end

    1 document: package imports decls

    2 identifier: "identifier"
    3           | "cpp_header (which can also be used as an identifier)"

    4 package: %empty
    5        | "package" qualified_name ';'

    6 imports: %empty
    7        | imports import

    8 import: "import" qualified_name ';'

    9 qualified_name: identifier
   10               | qualified_name '.' identifier

   11 decls: decl
   12      | decls decl

   13 decl: annotation_list unannotated_decl

   14 unannotated_decl: parcelable_decl
   15                 | interface_decl
   16                 | enum_decl
   17                 | union_decl

   18 type_params: identifier
   19            | type_params ',' identifier

   20 optional_type_params: %empty
   21                     | '<' type_params '>'

   22 parcelable_decl: "parcelable" qualified_name optional_type_params ';'
   23                | "parcelable" qualified_name optional_type_params '{' parcelable_members '}'
   24                | "parcelable" qualified_name "cpp_header (which can also be used as an identifier)" "string literal" ';'
   25                | "parcelable" error ';'

   26 parcelable_members: %empty
   27                   | parcelable_members variable_decl
   28                   | parcelable_members constant_decl
   29                   | parcelable_members error ';'

   30 variable_decl: type identifier ';'
   31              | type identifier '=' const_expr ';'

   32 interface_decl: "interface" qualified_name ';'
   33               | "interface" qualified_name '{' interface_members '}'
   34               | "oneway" "interface" qualified_name '{' interface_members '}'
   35               | "interface" error '{' interface_members '}'

   36 interface_members: %empty
   37                  | interface_members method_decl
   38                  | interface_members constant_decl
   39                  | interface_members error ';'

   40 const_expr: "true"
   41           | "false"
   42           | "char literal"
   43           | "int literal"
   44           | "float literal"
   45           | "hex literal"
   46           | "string literal"
   47           | qualified_name
   48           | '{' constant_value_list '}'
   49           | const_expr LOGICAL_OR const_expr
   50           | const_expr LOGICAL_AND const_expr
   51           | const_expr '|' const_expr
   52           | const_expr '^' const_expr
   53           | const_expr '&' const_expr
   54           | const_expr EQUALITY const_expr
   55           | const_expr NEQ const_expr
   56           | const_expr '<' const_expr
   57           | const_expr '>' const_expr
   58           | const_expr LEQ const_expr
   59           | const_expr GEQ const_expr
   60           | const_expr LSHIFT const_expr
   61           | const_expr RSHIFT const_expr
   62           | const_expr '+' const_expr
   63           | const_expr '-' const_expr
   64           | const_expr '*' const_expr
   65           | const_expr '/' const_expr
   66           | const_expr '%' const_expr
   67           | '+' const_expr
   68           | '-' const_expr
   69           | '!' const_expr
   70           | '~' const_expr
   71           | '(' const_expr ')'
   72           | '(' error ')'

   73 constant_value_list: %empty
   74                    | constant_value_non_empty_list
   75                    | constant_value_non_empty_list ','

   76 constant_value_non_empty_list: const_expr
   77                              | constant_value_non_empty_list ',' const_expr

   78 constant_decl: annotation_list "const" type identifier '=' const_expr ';'

   79 enumerator: identifier '=' const_expr
   80           | identifier

   81 enumerators: enumerator
   82            | enumerators ',' enumerator

   83 enum_decl_body: '{' enumerators '}'
   84               | '{' enumerators ',' '}'

   85 enum_decl: "enum" qualified_name enum_decl_body

   86 union_decl: "union" qualified_name optional_type_params '{' parcelable_members '}'

   87 method_decl: type identifier '(' arg_list ')' ';'
   88            | annotation_list "oneway" type identifier '(' arg_list ')' ';'
   89            | type identifier '(' arg_list ')' '=' "int literal" ';'
   90            | annotation_list "oneway" type identifier '(' arg_list ')' '=' "int literal" ';'

   91 arg_non_empty_list: arg
   92                   | arg_non_empty_list ',' arg

   93 arg_list: %empty
   94         | arg_non_empty_list

   95 arg: direction type identifier
   96    | type identifier

   97 non_array_type: annotation_list qualified_name
   98               | non_array_type '<' type_args '>'
   99               | non_array_type '<' non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' type_args ',' non_array_type '<' type_args RSHIFT

  101 type: non_array_type
  102     | type annotation_list '[' ']'

  103 type_args: type
  104          | type_args ',' type

  105 annotation_list: %empty
  106                | annotation_list annotation

  107 parameter: identifier '=' const_expr

  108 parameter_list: %empty
  109               | parameter_non_empty_list

  110 parameter_non_empty_list: parameter
  111                         | parameter_non_empty_list ',' parameter

  112 annotation: "annotation"
  113           | "annotation" '(' parameter_list ')'

  114 direction: "in"
  115          | "out"
  116          | "inout"


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 69
    '%' (37) 66
    '&' (38) 53
    '(' (40) 71 72 87 88 89 90 113
    ')' (41) 71 72 87 88 89 90 113
    '*' (42) 64
    '+' (43) 62 67
    ',' (44) 19 75 77 82 84 92 100 104 111
    '-' (45) 63 68
    '.' (46) 10
    '/' (47) 65
    ';' (59) 5 8 22 24 25 29 30 31 32 39 78 87 88 89 90
    '<' (60) 21 56 98 99 100
    '=' (61) 31 78 79 89 90 107
    '>' (62) 21 57 98
    '[' (91) 102
    ']' (93) 102
    '^' (94) 52
    '{' (123) 23 33 34 35 48 83 84 86
    '|' (124) 51
    '}' (125) 23 33 34 35 48 83 84 86
    '~' (126) 70
    error <token> (256) 25 29 35 39 72
    "package" <token> (258) 5
    "import" <token> (259) 8
    "annotation" <token> (260) 112 113
    "string literal" <token> (261) 24 46
    "identifier" <token> (262) 2
    "interface" <token> (263) 32 33 34 35
    "parcelable" <token> (264) 22 23 24 25
    "oneway" <token> (265) 34 88 90
    "enum" <token> (266) 85
    "union" <token> (267) 86
    "const" <token> (268) 78
    "char literal" <character> (269) 42
    "float literal" <token> (270) 44
    "hex literal" <token> (271) 45
    "int literal" <token> (272) 43 89 90
    "unrecognized character" (273)
    "cpp_header (which can also be used as an identifier)" <token> (274) 3 24
    "in" (275) 114
    "inout" (276) 116
    "out" (277) 115
    "true" (278) 40
    "false" (279) 41
    LOGICAL_OR (280) 49
    LOGICAL_AND (281) 50
    EQUALITY (282) 54
    NEQ (283) 55
    LEQ (284) 58
    GEQ (285) 59
    LSHIFT (286) 60
    RSHIFT (287) 61 99 100
    UNARY_PLUS (288)
    UNARY_MINUS (289)


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    document (58)
        on left: 1
        on right: 0
    identifier <token> (59)
        on left: 2 3
        on right: 9 10 18 19 30 31 78 79 80 87 88 89 90 95 96 107
    package <package> (60)
        on left: 4 5
        on right: 1
    imports <imports> (61)
        on left: 6 7
        on right: 1 7
    import <import> (62)
        on left: 8
        on right: 7
    qualified_name <token> (63)
        on left: 9 10
        on right: 5 8 10 22 23 24 32 33 34 47 85 86 97
    decls <declarations> (64)
        on left: 11 12
        on right: 1 12
    decl <declaration> (65)
        on left: 13
        on right: 11 12
    unannotated_decl <declaration> (66)
        on left: 14 15 16 17
        on right: 13
    type_params <type_params> (67)
        on left: 18 19
        on right: 19 21
    optional_type_params <type_params> (68)
        on left: 20 21
        on right: 22 23 86
    parcelable_decl <declaration> (69)
        on left: 22 23 24 25
        on right: 14
    parcelable_members <members> (70)
        on left: 26 27 28 29
        on right: 23 27 28 29 86
    variable_decl <variable> (71)
        on left: 30 31
        on right: 27
    interface_decl <declaration> (72)
        on left: 32 33 34 35
        on right: 15
    interface_members <members> (73)
        on left: 36 37 38 39
        on right: 33 34 35 37 38 39
    const_expr <const_expr> (74)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
        on right: 31 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 76 77 78 79 107
    constant_value_list <constant_value_list> (75)
        on left: 73 74 75
        on right: 48
    constant_value_non_empty_list <constant_value_list> (76)
        on left: 76 77
        on right: 74 75 77
    constant_decl <constant> (77)
        on left: 78
        on right: 28 38
    enumerator <enumerator> (78)
        on left: 79 80
        on right: 81 82
    enumerators <enumerators> (79)
        on left: 81 82
        on right: 82 83 84
    enum_decl_body <enumerators> (80)
        on left: 83 84
        on right: 85
    enum_decl <declaration> (81)
        on left: 85
        on right: 16
    union_decl <declaration> (82)
        on left: 86
        on right: 17
    method_decl <method> (83)
        on left: 87 88 89 90
        on right: 37
    arg_non_empty_list <arg_list> (84)
        on left: 91 92
        on right: 92 94
    arg_list <arg_list> (85)
        on left: 93 94
        on right: 87 88 89 90
    arg <arg> (86)
        on left: 95 96
        on right: 91 92
    non_array_type <type> (87)
        on left: 97 98 99 100
        on right: 98 99 100 101
    type <type> (88)
        on left: 101 102
        on right: 30 31 78 87 88 89 90 95 96 102 103 104
    type_args <type_args> (89)
        on left: 103 104
        on right: 98 99 100 104
    annotation_list <annotation_list> (90)
        on left: 105 106
        on right: 13 78 88 90 97 102 106
    parameter <param> (91)
        on left: 107
        on right: 110 111
    parameter_list <param_list> (92)
        on left: 108 109
        on right: 113
    parameter_non_empty_list <param_list> (93)
        on left: 110 111
        on right: 109 111
    annotation <annotation> (94)
        on left: 112 113
        on right: 106
    direction <direction> (95)
        on left: 114 115 116
        on right: 95


State 0

    0 $accept: • document $end

    "package"  shift, and go to state 1

    $default  reduce using rule 4 (package)

    document  go to state 2
    package   go to state 3


State 1

    5 package: "package" • qualified_name ';'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 7


State 2

    0 $accept: document • $end

    $end  shift, and go to state 8


State 3

    1 document: package • imports decls

    $default  reduce using rule 6 (imports)

    imports  go to state 9


State 4

    2 identifier: "identifier" •

    $default  reduce using rule 2 (identifier)


State 5

    3 identifier: "cpp_header (which can also be used as an identifier)" •

    $default  reduce using rule 3 (identifier)


State 6

    9 qualified_name: identifier •

    $default  reduce using rule 9 (qualified_name)


State 7

    5 package: "package" qualified_name • ';'
   10 qualified_name: qualified_name • '.' identifier

    '.'  shift, and go to state 10
    ';'  shift, and go to state 11


State 8

    0 $accept: document $end •

    $default  accept


State 9

    1 document: package imports • decls
    7 imports: imports • import

    "import"  shift, and go to state 12

    $default  reduce using rule 105 (annotation_list)

    import           go to state 13
    decls            go to state 14
    decl             go to state 15
    annotation_list  go to state 16


State 10

   10 qualified_name: qualified_name '.' • identifier

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier  go to state 17


State 11

    5 package: "package" qualified_name ';' •

    $default  reduce using rule 5 (package)


State 12

    8 import: "import" • qualified_name ';'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 18


State 13

    7 imports: imports import •

    $default  reduce using rule 7 (imports)


State 14

    1 document: package imports decls •
   12 decls: decls • decl

    $end      reduce using rule 1 (document)
    $default  reduce using rule 105 (annotation_list)

    decl             go to state 19
    annotation_list  go to state 16


State 15

   11 decls: decl •

    $default  reduce using rule 11 (decls)


State 16

   13 decl: annotation_list • unannotated_decl
  106 annotation_list: annotation_list • annotation

    "annotation"  shift, and go to state 20
    "interface"   shift, and go to state 21
    "parcelable"  shift, and go to state 22
    "oneway"      shift, and go to state 23
    "enum"        shift, and go to state 24
    "union"       shift, and go to state 25

    unannotated_decl  go to state 26
    parcelable_decl   go to state 27
    interface_decl    go to state 28
    enum_decl         go to state 29
    union_decl        go to state 30
    annotation        go to state 31


State 17

   10 qualified_name: qualified_name '.' identifier •

    $default  reduce using rule 10 (qualified_name)


State 18

    8 import: "import" qualified_name • ';'
   10 qualified_name: qualified_name • '.' identifier

    '.'  shift, and go to state 10
    ';'  shift, and go to state 32


State 19

   12 decls: decls decl •

    $default  reduce using rule 12 (decls)


State 20

  112 annotation: "annotation" •
  113           | "annotation" • '(' parameter_list ')'

    '('  shift, and go to state 33

    $default  reduce using rule 112 (annotation)


State 21

   32 interface_decl: "interface" • qualified_name ';'
   33               | "interface" • qualified_name '{' interface_members '}'
   35               | "interface" • error '{' interface_members '}'

    error                                                   shift, and go to state 34
    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 35


State 22

   22 parcelable_decl: "parcelable" • qualified_name optional_type_params ';'
   23                | "parcelable" • qualified_name optional_type_params '{' parcelable_members '}'
   24                | "parcelable" • qualified_name "cpp_header (which can also be used as an identifier)" "string literal" ';'
   25                | "parcelable" • error ';'

    error                                                   shift, and go to state 36
    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 37


State 23

   34 interface_decl: "oneway" • "interface" qualified_name '{' interface_members '}'

    "interface"  shift, and go to state 38


State 24

   85 enum_decl: "enum" • qualified_name enum_decl_body

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 39


State 25

   86 union_decl: "union" • qualified_name optional_type_params '{' parcelable_members '}'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 40


State 26

   13 decl: annotation_list unannotated_decl •

    $default  reduce using rule 13 (decl)


State 27

   14 unannotated_decl: parcelable_decl •

    $default  reduce using rule 14 (unannotated_decl)


State 28

   15 unannotated_decl: interface_decl •

    $default  reduce using rule 15 (unannotated_decl)


State 29

   16 unannotated_decl: enum_decl •

    $default  reduce using rule 16 (unannotated_decl)


State 30

   17 unannotated_decl: union_decl •

    $default  reduce using rule 17 (unannotated_decl)


State 31

  106 annotation_list: annotation_list annotation •

    $default  reduce using rule 106 (annotation_list)


State 32

    8 import: "import" qualified_name ';' •

    $default  reduce using rule 8 (import)


State 33

  113 annotation: "annotation" '(' • parameter_list ')'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 108 (parameter_list)

    identifier                go to state 41
    parameter                 go to state 42
    parameter_list            go to state 43
    parameter_non_empty_list  go to state 44


State 34

   35 interface_decl: "interface" error • '{' interface_members '}'

    '{'  shift, and go to state 45


State 35

   10 qualified_name: qualified_name • '.' identifier
   32 interface_decl: "interface" qualified_name • ';'
   33               | "interface" qualified_name • '{' interface_members '}'

    '.'  shift, and go to state 10
    '{'  shift, and go to state 46
    ';'  shift, and go to state 47


State 36

   25 parcelable_decl: "parcelable" error • ';'

    ';'  shift, and go to state 48


State 37

   10 qualified_name: qualified_name • '.' identifier
   22 parcelable_decl: "parcelable" qualified_name • optional_type_params ';'
   23                | "parcelable" qualified_name • optional_type_params '{' parcelable_members '}'
   24                | "parcelable" qualified_name • "cpp_header (which can also be used as an identifier)" "string literal" ';'

    '.'                                                     shift, and go to state 10
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 49
    '<'                                                     shift, and go to state 50

    $default  reduce using rule 20 (optional_type_params)

    optional_type_params  go to state 51


State 38

   34 interface_decl: "oneway" "interface" • qualified_name '{' interface_members '}'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 52


State 39

   10 qualified_name: qualified_name • '.' identifier
   85 enum_decl: "enum" qualified_name • enum_decl_body

    '.'  shift, and go to state 10
    '{'  shift, and go to state 53

    enum_decl_body  go to state 54


State 40

   10 qualified_name: qualified_name • '.' identifier
   86 union_decl: "union" qualified_name • optional_type_params '{' parcelable_members '}'

    '.'  shift, and go to state 10
    '<'  shift, and go to state 50

    $default  reduce using rule 20 (optional_type_params)

    optional_type_params  go to state 55


State 41

  107 parameter: identifier • '=' const_expr

    '='  shift, and go to state 56


State 42

  110 parameter_non_empty_list: parameter •

    $default  reduce using rule 110 (parameter_non_empty_list)


State 43

  113 annotation: "annotation" '(' parameter_list • ')'

    ')'  shift, and go to state 57


State 44

  109 parameter_list: parameter_non_empty_list •
  111 parameter_non_empty_list: parameter_non_empty_list • ',' parameter

    ','  shift, and go to state 58

    $default  reduce using rule 109 (parameter_list)


State 45

   35 interface_decl: "interface" error '{' • interface_members '}'

    $default  reduce using rule 36 (interface_members)

    interface_members  go to state 59


State 46

   33 interface_decl: "interface" qualified_name '{' • interface_members '}'

    $default  reduce using rule 36 (interface_members)

    interface_members  go to state 60


State 47

   32 interface_decl: "interface" qualified_name ';' •

    $default  reduce using rule 32 (interface_decl)


State 48

   25 parcelable_decl: "parcelable" error ';' •

    $default  reduce using rule 25 (parcelable_decl)


State 49

   24 parcelable_decl: "parcelable" qualified_name "cpp_header (which can also be used as an identifier)" • "string literal" ';'

    "string literal"  shift, and go to state 61


State 50

   21 optional_type_params: '<' • type_params '>'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier   go to state 62
    type_params  go to state 63


State 51

   22 parcelable_decl: "parcelable" qualified_name optional_type_params • ';'
   23                | "parcelable" qualified_name optional_type_params • '{' parcelable_members '}'

    '{'  shift, and go to state 64
    ';'  shift, and go to state 65


State 52

   10 qualified_name: qualified_name • '.' identifier
   34 interface_decl: "oneway" "interface" qualified_name • '{' interface_members '}'

    '.'  shift, and go to state 10
    '{'  shift, and go to state 66


State 53

   83 enum_decl_body: '{' • enumerators '}'
   84               | '{' • enumerators ',' '}'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier   go to state 67
    enumerator   go to state 68
    enumerators  go to state 69


State 54

   85 enum_decl: "enum" qualified_name enum_decl_body •

    $default  reduce using rule 85 (enum_decl)


State 55

   86 union_decl: "union" qualified_name optional_type_params • '{' parcelable_members '}'

    '{'  shift, and go to state 70


State 56

  107 parameter: identifier '=' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 85


State 57

  113 annotation: "annotation" '(' parameter_list ')' •

    $default  reduce using rule 113 (annotation)


State 58

  111 parameter_non_empty_list: parameter_non_empty_list ',' • parameter

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier  go to state 41
    parameter   go to state 86


State 59

   35 interface_decl: "interface" error '{' interface_members • '}'
   37 interface_members: interface_members • method_decl
   38                  | interface_members • constant_decl
   39                  | interface_members • error ';'

    error  shift, and go to state 87
    '}'    shift, and go to state 88

    "annotation"                                            reduce using rule 105 (annotation_list)
    "identifier"                                            reduce using rule 105 (annotation_list)
    "oneway"                                                reduce using rule 105 (annotation_list)
    "const"                                                 reduce using rule 105 (annotation_list)
    "cpp_header (which can also be used as an identifier)"  reduce using rule 105 (annotation_list)

    constant_decl    go to state 89
    method_decl      go to state 90
    non_array_type   go to state 91
    type             go to state 92
    annotation_list  go to state 93


State 60

   33 interface_decl: "interface" qualified_name '{' interface_members • '}'
   37 interface_members: interface_members • method_decl
   38                  | interface_members • constant_decl
   39                  | interface_members • error ';'

    error  shift, and go to state 87
    '}'    shift, and go to state 94

    "annotation"                                            reduce using rule 105 (annotation_list)
    "identifier"                                            reduce using rule 105 (annotation_list)
    "oneway"                                                reduce using rule 105 (annotation_list)
    "const"                                                 reduce using rule 105 (annotation_list)
    "cpp_header (which can also be used as an identifier)"  reduce using rule 105 (annotation_list)

    constant_decl    go to state 89
    method_decl      go to state 90
    non_array_type   go to state 91
    type             go to state 92
    annotation_list  go to state 93


State 61

   24 parcelable_decl: "parcelable" qualified_name "cpp_header (which can also be used as an identifier)" "string literal" • ';'

    ';'  shift, and go to state 95


State 62

   18 type_params: identifier •

    $default  reduce using rule 18 (type_params)


State 63

   19 type_params: type_params • ',' identifier
   21 optional_type_params: '<' type_params • '>'

    ','  shift, and go to state 96
    '>'  shift, and go to state 97


State 64

   23 parcelable_decl: "parcelable" qualified_name optional_type_params '{' • parcelable_members '}'

    $default  reduce using rule 26 (parcelable_members)

    parcelable_members  go to state 98


State 65

   22 parcelable_decl: "parcelable" qualified_name optional_type_params ';' •

    $default  reduce using rule 22 (parcelable_decl)


State 66

   34 interface_decl: "oneway" "interface" qualified_name '{' • interface_members '}'

    $default  reduce using rule 36 (interface_members)

    interface_members  go to state 99


State 67

   79 enumerator: identifier • '=' const_expr
   80           | identifier •

    '='  shift, and go to state 100

    $default  reduce using rule 80 (enumerator)


State 68

   81 enumerators: enumerator •

    $default  reduce using rule 81 (enumerators)


State 69

   82 enumerators: enumerators • ',' enumerator
   83 enum_decl_body: '{' enumerators • '}'
   84               | '{' enumerators • ',' '}'

    ','  shift, and go to state 101
    '}'  shift, and go to state 102


State 70

   86 union_decl: "union" qualified_name optional_type_params '{' • parcelable_members '}'

    $default  reduce using rule 26 (parcelable_members)

    parcelable_members  go to state 103


State 71

   46 const_expr: "string literal" •

    $default  reduce using rule 46 (const_expr)


State 72

   42 const_expr: "char literal" •

    $default  reduce using rule 42 (const_expr)


State 73

   44 const_expr: "float literal" •

    $default  reduce using rule 44 (const_expr)


State 74

   45 const_expr: "hex literal" •

    $default  reduce using rule 45 (const_expr)


State 75

   43 const_expr: "int literal" •

    $default  reduce using rule 43 (const_expr)


State 76

   71 const_expr: '(' • const_expr ')'
   72           | '(' • error ')'

    error                                                   shift, and go to state 104
    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 105


State 77

   48 const_expr: '{' • constant_value_list '}'

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    $default  reduce using rule 73 (constant_value_list)

    identifier                     go to state 6
    qualified_name                 go to state 84
    const_expr                     go to state 106
    constant_value_list            go to state 107
    constant_value_non_empty_list  go to state 108


State 78

   40 const_expr: "true" •

    $default  reduce using rule 40 (const_expr)


State 79

   41 const_expr: "false" •

    $default  reduce using rule 41 (const_expr)


State 80

   67 const_expr: '+' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 109


State 81

   68 const_expr: '-' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 110


State 82

   69 const_expr: '!' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 111


State 83

   70 const_expr: '~' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 112


State 84

   10 qualified_name: qualified_name • '.' identifier
   47 const_expr: qualified_name •

    '.'  shift, and go to state 10

    $default  reduce using rule 47 (const_expr)


State 85

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
  107 parameter: identifier '=' const_expr •

    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130

    $default  reduce using rule 107 (parameter)


State 86

  111 parameter_non_empty_list: parameter_non_empty_list ',' parameter •

    $default  reduce using rule 111 (parameter_non_empty_list)


State 87

   39 interface_members: interface_members error • ';'

    ';'  shift, and go to state 131


State 88

   35 interface_decl: "interface" error '{' interface_members '}' •

    $default  reduce using rule 35 (interface_decl)


State 89

   38 interface_members: interface_members constant_decl •

    $default  reduce using rule 38 (interface_members)


State 90

   37 interface_members: interface_members method_decl •

    $default  reduce using rule 37 (interface_members)


State 91

   98 non_array_type: non_array_type • '<' type_args '>'
   99               | non_array_type • '<' non_array_type '<' type_args RSHIFT
  100               | non_array_type • '<' type_args ',' non_array_type '<' type_args RSHIFT
  101 type: non_array_type •

    '<'  shift, and go to state 132

    $default  reduce using rule 101 (type)


State 92

   87 method_decl: type • identifier '(' arg_list ')' ';'
   89            | type • identifier '(' arg_list ')' '=' "int literal" ';'
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 133
    annotation_list  go to state 134


State 93

   78 constant_decl: annotation_list • "const" type identifier '=' const_expr ';'
   88 method_decl: annotation_list • "oneway" type identifier '(' arg_list ')' ';'
   90            | annotation_list • "oneway" type identifier '(' arg_list ')' '=' "int literal" ';'
   97 non_array_type: annotation_list • qualified_name
  106 annotation_list: annotation_list • annotation

    "annotation"                                            shift, and go to state 20
    "identifier"                                            shift, and go to state 4
    "oneway"                                                shift, and go to state 135
    "const"                                                 shift, and go to state 136
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 137
    annotation      go to state 31


State 94

   33 interface_decl: "interface" qualified_name '{' interface_members '}' •

    $default  reduce using rule 33 (interface_decl)


State 95

   24 parcelable_decl: "parcelable" qualified_name "cpp_header (which can also be used as an identifier)" "string literal" ';' •

    $default  reduce using rule 24 (parcelable_decl)


State 96

   19 type_params: type_params ',' • identifier

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier  go to state 138


State 97

   21 optional_type_params: '<' type_params '>' •

    $default  reduce using rule 21 (optional_type_params)


State 98

   23 parcelable_decl: "parcelable" qualified_name optional_type_params '{' parcelable_members • '}'
   27 parcelable_members: parcelable_members • variable_decl
   28                   | parcelable_members • constant_decl
   29                   | parcelable_members • error ';'

    error  shift, and go to state 139
    '}'    shift, and go to state 140

    "annotation"                                            reduce using rule 105 (annotation_list)
    "identifier"                                            reduce using rule 105 (annotation_list)
    "const"                                                 reduce using rule 105 (annotation_list)
    "cpp_header (which can also be used as an identifier)"  reduce using rule 105 (annotation_list)

    variable_decl    go to state 141
    constant_decl    go to state 142
    non_array_type   go to state 91
    type             go to state 143
    annotation_list  go to state 144


State 99

   34 interface_decl: "oneway" "interface" qualified_name '{' interface_members • '}'
   37 interface_members: interface_members • method_decl
   38                  | interface_members • constant_decl
   39                  | interface_members • error ';'

    error  shift, and go to state 87
    '}'    shift, and go to state 145

    "annotation"                                            reduce using rule 105 (annotation_list)
    "identifier"                                            reduce using rule 105 (annotation_list)
    "oneway"                                                reduce using rule 105 (annotation_list)
    "const"                                                 reduce using rule 105 (annotation_list)
    "cpp_header (which can also be used as an identifier)"  reduce using rule 105 (annotation_list)

    constant_decl    go to state 89
    method_decl      go to state 90
    non_array_type   go to state 91
    type             go to state 92
    annotation_list  go to state 93


State 100

   79 enumerator: identifier '=' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 146


State 101

   82 enumerators: enumerators ',' • enumerator
   84 enum_decl_body: '{' enumerators ',' • '}'

    "identifier"                                            shift, and go to state 4
    '}'                                                     shift, and go to state 147
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier  go to state 67
    enumerator  go to state 148


State 102

   83 enum_decl_body: '{' enumerators '}' •

    $default  reduce using rule 83 (enum_decl_body)


State 103

   27 parcelable_members: parcelable_members • variable_decl
   28                   | parcelable_members • constant_decl
   29                   | parcelable_members • error ';'
   86 union_decl: "union" qualified_name optional_type_params '{' parcelable_members • '}'

    error  shift, and go to state 139
    '}'    shift, and go to state 149

    "annotation"                                            reduce using rule 105 (annotation_list)
    "identifier"                                            reduce using rule 105 (annotation_list)
    "const"                                                 reduce using rule 105 (annotation_list)
    "cpp_header (which can also be used as an identifier)"  reduce using rule 105 (annotation_list)

    variable_decl    go to state 141
    constant_decl    go to state 142
    non_array_type   go to state 91
    type             go to state 143
    annotation_list  go to state 144


State 104

   72 const_expr: '(' error • ')'

    ')'  shift, and go to state 150


State 105

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   71           | '(' const_expr • ')'

    ')'          shift, and go to state 151
    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130


State 106

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   76 constant_value_non_empty_list: const_expr •

    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130

    $default  reduce using rule 76 (constant_value_non_empty_list)


State 107

   48 const_expr: '{' constant_value_list • '}'

    '}'  shift, and go to state 152


State 108

   74 constant_value_list: constant_value_non_empty_list •
   75                    | constant_value_non_empty_list • ','
   77 constant_value_non_empty_list: constant_value_non_empty_list • ',' const_expr

    ','  shift, and go to state 153

    $default  reduce using rule 74 (constant_value_list)


State 109

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   67           | '+' const_expr •

    $default  reduce using rule 67 (const_expr)


State 110

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   68           | '-' const_expr •

    $default  reduce using rule 68 (const_expr)


State 111

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   69           | '!' const_expr •

    $default  reduce using rule 69 (const_expr)


State 112

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   70           | '~' const_expr •

    $default  reduce using rule 70 (const_expr)


State 113

   49 const_expr: const_expr LOGICAL_OR • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 154


State 114

   50 const_expr: const_expr LOGICAL_AND • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 155


State 115

   51 const_expr: const_expr '|' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 156


State 116

   52 const_expr: const_expr '^' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 157


State 117

   53 const_expr: const_expr '&' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 158


State 118

   54 const_expr: const_expr EQUALITY • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 159


State 119

   55 const_expr: const_expr NEQ • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 160


State 120

   56 const_expr: const_expr '<' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 161


State 121

   57 const_expr: const_expr '>' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 162


State 122

   58 const_expr: const_expr LEQ • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 163


State 123

   59 const_expr: const_expr GEQ • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 164


State 124

   60 const_expr: const_expr LSHIFT • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 165


State 125

   61 const_expr: const_expr RSHIFT • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 166


State 126

   62 const_expr: const_expr '+' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 167


State 127

   63 const_expr: const_expr '-' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 168


State 128

   64 const_expr: const_expr '*' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 169


State 129

   65 const_expr: const_expr '/' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 170


State 130

   66 const_expr: const_expr '%' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 171


State 131

   39 interface_members: interface_members error ';' •

    $default  reduce using rule 39 (interface_members)


State 132

   98 non_array_type: non_array_type '<' • type_args '>'
   99               | non_array_type '<' • non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' • type_args ',' non_array_type '<' type_args RSHIFT

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 172
    type             go to state 173
    type_args        go to state 174
    annotation_list  go to state 175


State 133

   87 method_decl: type identifier • '(' arg_list ')' ';'
   89            | type identifier • '(' arg_list ')' '=' "int literal" ';'

    '('  shift, and go to state 176


State 134

  102 type: type annotation_list • '[' ']'
  106 annotation_list: annotation_list • annotation

    "annotation"  shift, and go to state 20
    '['           shift, and go to state 177

    annotation  go to state 31


State 135

   88 method_decl: annotation_list "oneway" • type identifier '(' arg_list ')' ';'
   90            | annotation_list "oneway" • type identifier '(' arg_list ')' '=' "int literal" ';'

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 91
    type             go to state 178
    annotation_list  go to state 175


State 136

   78 constant_decl: annotation_list "const" • type identifier '=' const_expr ';'

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 91
    type             go to state 179
    annotation_list  go to state 175


State 137

   10 qualified_name: qualified_name • '.' identifier
   97 non_array_type: annotation_list qualified_name •

    '.'  shift, and go to state 10

    $default  reduce using rule 97 (non_array_type)


State 138

   19 type_params: type_params ',' identifier •

    $default  reduce using rule 19 (type_params)


State 139

   29 parcelable_members: parcelable_members error • ';'

    ';'  shift, and go to state 180


State 140

   23 parcelable_decl: "parcelable" qualified_name optional_type_params '{' parcelable_members '}' •

    $default  reduce using rule 23 (parcelable_decl)


State 141

   27 parcelable_members: parcelable_members variable_decl •

    $default  reduce using rule 27 (parcelable_members)


State 142

   28 parcelable_members: parcelable_members constant_decl •

    $default  reduce using rule 28 (parcelable_members)


State 143

   30 variable_decl: type • identifier ';'
   31              | type • identifier '=' const_expr ';'
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 181
    annotation_list  go to state 134


State 144

   78 constant_decl: annotation_list • "const" type identifier '=' const_expr ';'
   97 non_array_type: annotation_list • qualified_name
  106 annotation_list: annotation_list • annotation

    "annotation"                                            shift, and go to state 20
    "identifier"                                            shift, and go to state 4
    "const"                                                 shift, and go to state 136
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 137
    annotation      go to state 31


State 145

   34 interface_decl: "oneway" "interface" qualified_name '{' interface_members '}' •

    $default  reduce using rule 34 (interface_decl)


State 146

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   79 enumerator: identifier '=' const_expr •

    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130

    $default  reduce using rule 79 (enumerator)


State 147

   84 enum_decl_body: '{' enumerators ',' '}' •

    $default  reduce using rule 84 (enum_decl_body)


State 148

   82 enumerators: enumerators ',' enumerator •

    $default  reduce using rule 82 (enumerators)


State 149

   86 union_decl: "union" qualified_name optional_type_params '{' parcelable_members '}' •

    $default  reduce using rule 86 (union_decl)


State 150

   72 const_expr: '(' error ')' •

    $default  reduce using rule 72 (const_expr)


State 151

   71 const_expr: '(' const_expr ')' •

    $default  reduce using rule 71 (const_expr)


State 152

   48 const_expr: '{' constant_value_list '}' •

    $default  reduce using rule 48 (const_expr)


State 153

   75 constant_value_list: constant_value_non_empty_list ',' •
   77 constant_value_non_empty_list: constant_value_non_empty_list ',' • const_expr

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    $default  reduce using rule 75 (constant_value_list)

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 182


State 154

   49 const_expr: const_expr • LOGICAL_OR const_expr
   49           | const_expr LOGICAL_OR const_expr •
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130

    $default  reduce using rule 49 (const_expr)


State 155

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   50           | const_expr LOGICAL_AND const_expr •
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '|'       shift, and go to state 115
    '^'       shift, and go to state 116
    '&'       shift, and go to state 117
    EQUALITY  shift, and go to state 118
    NEQ       shift, and go to state 119
    '<'       shift, and go to state 120
    '>'       shift, and go to state 121
    LEQ       shift, and go to state 122
    GEQ       shift, and go to state 123
    LSHIFT    shift, and go to state 124
    RSHIFT    shift, and go to state 125
    '+'       shift, and go to state 126
    '-'       shift, and go to state 127
    '*'       shift, and go to state 128
    '/'       shift, and go to state 129
    '%'       shift, and go to state 130

    $default  reduce using rule 50 (const_expr)


State 156

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   51           | const_expr '|' const_expr •
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '^'       shift, and go to state 116
    '&'       shift, and go to state 117
    EQUALITY  shift, and go to state 118
    NEQ       shift, and go to state 119
    '<'       shift, and go to state 120
    '>'       shift, and go to state 121
    LEQ       shift, and go to state 122
    GEQ       shift, and go to state 123
    LSHIFT    shift, and go to state 124
    RSHIFT    shift, and go to state 125
    '+'       shift, and go to state 126
    '-'       shift, and go to state 127
    '*'       shift, and go to state 128
    '/'       shift, and go to state 129
    '%'       shift, and go to state 130

    $default  reduce using rule 51 (const_expr)


State 157

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   52           | const_expr '^' const_expr •
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '&'       shift, and go to state 117
    EQUALITY  shift, and go to state 118
    NEQ       shift, and go to state 119
    '<'       shift, and go to state 120
    '>'       shift, and go to state 121
    LEQ       shift, and go to state 122
    GEQ       shift, and go to state 123
    LSHIFT    shift, and go to state 124
    RSHIFT    shift, and go to state 125
    '+'       shift, and go to state 126
    '-'       shift, and go to state 127
    '*'       shift, and go to state 128
    '/'       shift, and go to state 129
    '%'       shift, and go to state 130

    $default  reduce using rule 52 (const_expr)


State 158

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   53           | const_expr '&' const_expr •
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    EQUALITY  shift, and go to state 118
    NEQ       shift, and go to state 119
    '<'       shift, and go to state 120
    '>'       shift, and go to state 121
    LEQ       shift, and go to state 122
    GEQ       shift, and go to state 123
    LSHIFT    shift, and go to state 124
    RSHIFT    shift, and go to state 125
    '+'       shift, and go to state 126
    '-'       shift, and go to state 127
    '*'       shift, and go to state 128
    '/'       shift, and go to state 129
    '%'       shift, and go to state 130

    $default  reduce using rule 53 (const_expr)


State 159

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   54           | const_expr EQUALITY const_expr •
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '<'     shift, and go to state 120
    '>'     shift, and go to state 121
    LEQ     shift, and go to state 122
    GEQ     shift, and go to state 123
    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 54 (const_expr)


State 160

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   55           | const_expr NEQ const_expr •
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '<'     shift, and go to state 120
    '>'     shift, and go to state 121
    LEQ     shift, and go to state 122
    GEQ     shift, and go to state 123
    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 55 (const_expr)


State 161

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   56           | const_expr '<' const_expr •
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 56 (const_expr)


State 162

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   57           | const_expr '>' const_expr •
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 57 (const_expr)


State 163

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   58           | const_expr LEQ const_expr •
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 58 (const_expr)


State 164

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   59           | const_expr GEQ const_expr •
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    LSHIFT  shift, and go to state 124
    RSHIFT  shift, and go to state 125
    '+'     shift, and go to state 126
    '-'     shift, and go to state 127
    '*'     shift, and go to state 128
    '/'     shift, and go to state 129
    '%'     shift, and go to state 130

    $default  reduce using rule 59 (const_expr)


State 165

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   60           | const_expr LSHIFT const_expr •
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '+'  shift, and go to state 126
    '-'  shift, and go to state 127
    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 60 (const_expr)


State 166

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   61           | const_expr RSHIFT const_expr •
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '+'  shift, and go to state 126
    '-'  shift, and go to state 127
    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 61 (const_expr)


State 167

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   62           | const_expr '+' const_expr •
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 62 (const_expr)


State 168

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   63           | const_expr '-' const_expr •
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 63 (const_expr)


State 169

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   64           | const_expr '*' const_expr •
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    $default  reduce using rule 64 (const_expr)


State 170

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   65           | const_expr '/' const_expr •
   66           | const_expr • '%' const_expr

    $default  reduce using rule 65 (const_expr)


State 171

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   66           | const_expr '%' const_expr •

    $default  reduce using rule 66 (const_expr)


State 172

   98 non_array_type: non_array_type • '<' type_args '>'
   99               | non_array_type • '<' non_array_type '<' type_args RSHIFT
   99               | non_array_type '<' non_array_type • '<' type_args RSHIFT
  100               | non_array_type • '<' type_args ',' non_array_type '<' type_args RSHIFT
  101 type: non_array_type •

    '<'  shift, and go to state 183

    $default  reduce using rule 101 (type)


State 173

  102 type: type • annotation_list '[' ']'
  103 type_args: type •

    "annotation"  reduce using rule 105 (annotation_list)
    '['           reduce using rule 105 (annotation_list)
    $default      reduce using rule 103 (type_args)

    annotation_list  go to state 134


State 174

   98 non_array_type: non_array_type '<' type_args • '>'
  100               | non_array_type '<' type_args • ',' non_array_type '<' type_args RSHIFT
  104 type_args: type_args • ',' type

    ','  shift, and go to state 184
    '>'  shift, and go to state 185


State 175

   97 non_array_type: annotation_list • qualified_name
  106 annotation_list: annotation_list • annotation

    "annotation"                                            shift, and go to state 20
    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    identifier      go to state 6
    qualified_name  go to state 137
    annotation      go to state 31


State 176

   87 method_decl: type identifier '(' • arg_list ')' ';'
   89            | type identifier '(' • arg_list ')' '=' "int literal" ';'

    "in"     shift, and go to state 186
    "inout"  shift, and go to state 187
    "out"    shift, and go to state 188

    ')'       reduce using rule 93 (arg_list)
    $default  reduce using rule 105 (annotation_list)

    arg_non_empty_list  go to state 189
    arg_list            go to state 190
    arg                 go to state 191
    non_array_type      go to state 91
    type                go to state 192
    annotation_list     go to state 175
    direction           go to state 193


State 177

  102 type: type annotation_list '[' • ']'

    ']'  shift, and go to state 194


State 178

   88 method_decl: annotation_list "oneway" type • identifier '(' arg_list ')' ';'
   90            | annotation_list "oneway" type • identifier '(' arg_list ')' '=' "int literal" ';'
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 195
    annotation_list  go to state 134


State 179

   78 constant_decl: annotation_list "const" type • identifier '=' const_expr ';'
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 196
    annotation_list  go to state 134


State 180

   29 parcelable_members: parcelable_members error ';' •

    $default  reduce using rule 29 (parcelable_members)


State 181

   30 variable_decl: type identifier • ';'
   31              | type identifier • '=' const_expr ';'

    '='  shift, and go to state 197
    ';'  shift, and go to state 198


State 182

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   77 constant_value_non_empty_list: constant_value_non_empty_list ',' const_expr •

    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130

    $default  reduce using rule 77 (constant_value_non_empty_list)


State 183

   98 non_array_type: non_array_type '<' • type_args '>'
   99               | non_array_type '<' • non_array_type '<' type_args RSHIFT
   99               | non_array_type '<' non_array_type '<' • type_args RSHIFT
  100               | non_array_type '<' • type_args ',' non_array_type '<' type_args RSHIFT

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 172
    type             go to state 173
    type_args        go to state 199
    annotation_list  go to state 175


State 184

  100 non_array_type: non_array_type '<' type_args ',' • non_array_type '<' type_args RSHIFT
  104 type_args: type_args ',' • type

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 200
    type             go to state 201
    annotation_list  go to state 175


State 185

   98 non_array_type: non_array_type '<' type_args '>' •

    $default  reduce using rule 98 (non_array_type)


State 186

  114 direction: "in" •

    $default  reduce using rule 114 (direction)


State 187

  116 direction: "inout" •

    $default  reduce using rule 116 (direction)


State 188

  115 direction: "out" •

    $default  reduce using rule 115 (direction)


State 189

   92 arg_non_empty_list: arg_non_empty_list • ',' arg
   94 arg_list: arg_non_empty_list •

    ','  shift, and go to state 202

    $default  reduce using rule 94 (arg_list)


State 190

   87 method_decl: type identifier '(' arg_list • ')' ';'
   89            | type identifier '(' arg_list • ')' '=' "int literal" ';'

    ')'  shift, and go to state 203


State 191

   91 arg_non_empty_list: arg •

    $default  reduce using rule 91 (arg_non_empty_list)


State 192

   96 arg: type • identifier
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 204
    annotation_list  go to state 134


State 193

   95 arg: direction • type identifier

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 91
    type             go to state 205
    annotation_list  go to state 175


State 194

  102 type: type annotation_list '[' ']' •

    $default  reduce using rule 102 (type)


State 195

   88 method_decl: annotation_list "oneway" type identifier • '(' arg_list ')' ';'
   90            | annotation_list "oneway" type identifier • '(' arg_list ')' '=' "int literal" ';'

    '('  shift, and go to state 206


State 196

   78 constant_decl: annotation_list "const" type identifier • '=' const_expr ';'

    '='  shift, and go to state 207


State 197

   31 variable_decl: type identifier '=' • const_expr ';'

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 208


State 198

   30 variable_decl: type identifier ';' •

    $default  reduce using rule 30 (variable_decl)


State 199

   98 non_array_type: non_array_type '<' type_args • '>'
   99               | non_array_type '<' non_array_type '<' type_args • RSHIFT
  100               | non_array_type '<' type_args • ',' non_array_type '<' type_args RSHIFT
  104 type_args: type_args • ',' type

    ','     shift, and go to state 184
    '>'     shift, and go to state 185
    RSHIFT  shift, and go to state 209


State 200

   98 non_array_type: non_array_type • '<' type_args '>'
   99               | non_array_type • '<' non_array_type '<' type_args RSHIFT
  100               | non_array_type • '<' type_args ',' non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' type_args ',' non_array_type • '<' type_args RSHIFT
  101 type: non_array_type •

    '<'  shift, and go to state 210

    $default  reduce using rule 101 (type)


State 201

  102 type: type • annotation_list '[' ']'
  104 type_args: type_args ',' type •

    "annotation"  reduce using rule 105 (annotation_list)
    '['           reduce using rule 105 (annotation_list)
    $default      reduce using rule 104 (type_args)

    annotation_list  go to state 134


State 202

   92 arg_non_empty_list: arg_non_empty_list ',' • arg

    "in"     shift, and go to state 186
    "inout"  shift, and go to state 187
    "out"    shift, and go to state 188

    $default  reduce using rule 105 (annotation_list)

    arg              go to state 211
    non_array_type   go to state 91
    type             go to state 192
    annotation_list  go to state 175
    direction        go to state 193


State 203

   87 method_decl: type identifier '(' arg_list ')' • ';'
   89            | type identifier '(' arg_list ')' • '=' "int literal" ';'

    '='  shift, and go to state 212
    ';'  shift, and go to state 213


State 204

   96 arg: type identifier •

    $default  reduce using rule 96 (arg)


State 205

   95 arg: direction type • identifier
  102 type: type • annotation_list '[' ']'

    "identifier"                                            shift, and go to state 4
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5

    $default  reduce using rule 105 (annotation_list)

    identifier       go to state 214
    annotation_list  go to state 134


State 206

   88 method_decl: annotation_list "oneway" type identifier '(' • arg_list ')' ';'
   90            | annotation_list "oneway" type identifier '(' • arg_list ')' '=' "int literal" ';'

    "in"     shift, and go to state 186
    "inout"  shift, and go to state 187
    "out"    shift, and go to state 188

    ')'       reduce using rule 93 (arg_list)
    $default  reduce using rule 105 (annotation_list)

    arg_non_empty_list  go to state 189
    arg_list            go to state 215
    arg                 go to state 191
    non_array_type      go to state 91
    type                go to state 192
    annotation_list     go to state 175
    direction           go to state 193


State 207

   78 constant_decl: annotation_list "const" type identifier '=' • const_expr ';'

    "string literal"                                        shift, and go to state 71
    "identifier"                                            shift, and go to state 4
    "char literal"                                          shift, and go to state 72
    "float literal"                                         shift, and go to state 73
    "hex literal"                                           shift, and go to state 74
    "int literal"                                           shift, and go to state 75
    '('                                                     shift, and go to state 76
    '{'                                                     shift, and go to state 77
    "cpp_header (which can also be used as an identifier)"  shift, and go to state 5
    "true"                                                  shift, and go to state 78
    "false"                                                 shift, and go to state 79
    '+'                                                     shift, and go to state 80
    '-'                                                     shift, and go to state 81
    '!'                                                     shift, and go to state 82
    '~'                                                     shift, and go to state 83

    identifier      go to state 6
    qualified_name  go to state 84
    const_expr      go to state 216


State 208

   31 variable_decl: type identifier '=' const_expr • ';'
   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr

    ';'          shift, and go to state 217
    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130


State 209

   99 non_array_type: non_array_type '<' non_array_type '<' type_args RSHIFT •

    $default  reduce using rule 99 (non_array_type)


State 210

   98 non_array_type: non_array_type '<' • type_args '>'
   99               | non_array_type '<' • non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' • type_args ',' non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' type_args ',' non_array_type '<' • type_args RSHIFT

    $default  reduce using rule 105 (annotation_list)

    non_array_type   go to state 172
    type             go to state 173
    type_args        go to state 218
    annotation_list  go to state 175


State 211

   92 arg_non_empty_list: arg_non_empty_list ',' arg •

    $default  reduce using rule 92 (arg_non_empty_list)


State 212

   89 method_decl: type identifier '(' arg_list ')' '=' • "int literal" ';'

    "int literal"  shift, and go to state 219


State 213

   87 method_decl: type identifier '(' arg_list ')' ';' •

    $default  reduce using rule 87 (method_decl)


State 214

   95 arg: direction type identifier •

    $default  reduce using rule 95 (arg)


State 215

   88 method_decl: annotation_list "oneway" type identifier '(' arg_list • ')' ';'
   90            | annotation_list "oneway" type identifier '(' arg_list • ')' '=' "int literal" ';'

    ')'  shift, and go to state 220


State 216

   49 const_expr: const_expr • LOGICAL_OR const_expr
   50           | const_expr • LOGICAL_AND const_expr
   51           | const_expr • '|' const_expr
   52           | const_expr • '^' const_expr
   53           | const_expr • '&' const_expr
   54           | const_expr • EQUALITY const_expr
   55           | const_expr • NEQ const_expr
   56           | const_expr • '<' const_expr
   57           | const_expr • '>' const_expr
   58           | const_expr • LEQ const_expr
   59           | const_expr • GEQ const_expr
   60           | const_expr • LSHIFT const_expr
   61           | const_expr • RSHIFT const_expr
   62           | const_expr • '+' const_expr
   63           | const_expr • '-' const_expr
   64           | const_expr • '*' const_expr
   65           | const_expr • '/' const_expr
   66           | const_expr • '%' const_expr
   78 constant_decl: annotation_list "const" type identifier '=' const_expr • ';'

    ';'          shift, and go to state 221
    LOGICAL_OR   shift, and go to state 113
    LOGICAL_AND  shift, and go to state 114
    '|'          shift, and go to state 115
    '^'          shift, and go to state 116
    '&'          shift, and go to state 117
    EQUALITY     shift, and go to state 118
    NEQ          shift, and go to state 119
    '<'          shift, and go to state 120
    '>'          shift, and go to state 121
    LEQ          shift, and go to state 122
    GEQ          shift, and go to state 123
    LSHIFT       shift, and go to state 124
    RSHIFT       shift, and go to state 125
    '+'          shift, and go to state 126
    '-'          shift, and go to state 127
    '*'          shift, and go to state 128
    '/'          shift, and go to state 129
    '%'          shift, and go to state 130


State 217

   31 variable_decl: type identifier '=' const_expr ';' •

    $default  reduce using rule 31 (variable_decl)


State 218

   98 non_array_type: non_array_type '<' type_args • '>'
  100               | non_array_type '<' type_args • ',' non_array_type '<' type_args RSHIFT
  100               | non_array_type '<' type_args ',' non_array_type '<' type_args • RSHIFT
  104 type_args: type_args • ',' type

    ','     shift, and go to state 184
    '>'     shift, and go to state 185
    RSHIFT  shift, and go to state 222


State 219

   89 method_decl: type identifier '(' arg_list ')' '=' "int literal" • ';'

    ';'  shift, and go to state 223


State 220

   88 method_decl: annotation_list "oneway" type identifier '(' arg_list ')' • ';'
   90            | annotation_list "oneway" type identifier '(' arg_list ')' • '=' "int literal" ';'

    '='  shift, and go to state 224
    ';'  shift, and go to state 225


State 221

   78 constant_decl: annotation_list "const" type identifier '=' const_expr ';' •

    $default  reduce using rule 78 (constant_decl)


State 222

  100 non_array_type: non_array_type '<' type_args ',' non_array_type '<' type_args RSHIFT •

    $default  reduce using rule 100 (non_array_type)


State 223

   89 method_decl: type identifier '(' arg_list ')' '=' "int literal" ';' •

    $default  reduce using rule 89 (method_decl)


State 224

   90 method_decl: annotation_list "oneway" type identifier '(' arg_list ')' '=' • "int literal" ';'

    "int literal"  shift, and go to state 226


State 225

   88 method_decl: annotation_list "oneway" type identifier '(' arg_list ')' ';' •

    $default  reduce using rule 88 (method_decl)


State 226

   90 method_decl: annotation_list "oneway" type identifier '(' arg_list ')' '=' "int literal" • ';'

    ';'  shift, and go to state 227


State 227

   90 method_decl: annotation_list "oneway" type identifier '(' arg_list ')' '=' "int literal" ';' •

    $default  reduce using rule 90 (method_decl)
